name: Backend CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'packages/backend/**'
      - 'infra/**'
      - '.github/workflows/deploy-backend.yml'
  pull_request:
    branches: [main]
    paths:
      - 'packages/backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: ${{ secrets.REGION }}
  SERVICE: ${{ secrets.SERVICE_NAME }}
  REGISTRY: ${{ secrets.REGISTRY }}
  IMAGE_NAME: swarm-notifier

permissions:
  contents: read
  id-token: write
  security-events: write

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check code formatting
        run: pnpm backend check:format

      - name: Run type checking
        run: pnpm backend check:types

      - name: Build application
        run: pnpm backend build

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_CLOUD_WIF_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_CLOUD_WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/backend/Dockerfile
          push: false
          load: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.12

      - name: Terraform Init
        run: terraform init
        working-directory: infra/env/production

      - name: Terraform Plan
        run: terraform plan
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.REGION }}
          TF_VAR_image_url: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          TF_VAR_notification_channels: "[]"
          TF_VAR_manage_workload_identity: "false"
          TF_VAR_discord_target_server_id: ${{ secrets.TF_VAR_discord_target_server_id }}
        working-directory: infra/env/production

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.REGION }}
          TF_VAR_image_url: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          TF_VAR_notification_channels: "[]"
          TF_VAR_manage_workload_identity: "false"
          TF_VAR_discord_target_server_id: ${{ secrets.TF_VAR_discord_target_server_id }}
        working-directory: infra/env/production

      - name: Get service URL
        id: service-url
        run: |
          URL=$(terraform output -raw service_url)
          echo "url=$URL" >> $GITHUB_OUTPUT
        working-directory: infra/env/production

      - name: Health check
        run: |
          echo "Waiting for service to be ready..."
          sleep 30
          curl -f "${{ steps.service-url.outputs.url }}/webhook/health" || exit 1
          echo "✅ Service deployed successfully!"
          echo "🚀 Service URL: ${{ steps.service-url.outputs.url }}"

      - name: Deploy summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Service URL**: ${{ steps.service-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Successfully deployed" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Determine Status
        id: status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "color=3066993" >> $GITHUB_OUTPUT  # Green
            echo "status=✅ Success" >> $GITHUB_OUTPUT
          else
            echo "color=15158332" >> $GITHUB_OUTPUT  # Red
            echo "status=❌ Failed" >> $GITHUB_OUTPUT
          fi

      - name: Get PR Information
        id: pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the PR that was merged into this commit
          PR_DATA=$(gh pr list \
            --repo ${{ github.repository }} \
            --state merged \
            --search "${{ github.sha }}" \
            --json number,title,url \
            --limit 1)

          if [ "$PR_DATA" != "[]" ]; then
            PR_NUMBER=$(echo "$PR_DATA" | jq -r '.[0].number')
            PR_TITLE=$(echo "$PR_DATA" | jq -r '.[0].title')
            PR_URL=$(echo "$PR_DATA" | jq -r '.[0].url')

            echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "title=$PR_TITLE" >> $GITHUB_OUTPUT
            echo "url=$PR_URL" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_DEPLOY_WEBHOOK_URL }}
          STATUS: ${{ steps.status.outputs.status }}
          COLOR: ${{ steps.status.outputs.color }}
          AUTHOR: ${{ github.actor }}
          COMMIT_SHA: ${{ github.sha }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
          TIMESTAMP: ${{ github.event.head_commit.timestamp }}
          PR_FOUND: ${{ steps.pr.outputs.found }}
          PR_NUMBER: ${{ steps.pr.outputs.number }}
          PR_TITLE: ${{ steps.pr.outputs.title }}
          PR_URL: ${{ steps.pr.outputs.url }}
        run: |
          # Build base fields
          FIELDS=$(jq -n -c '[
            {
              "name": "Environment",
              "value": "Production",
              "inline": true
            },
            {
              "name": "Author",
              "value": $AUTHOR,
              "inline": true
            }
          ]' --arg AUTHOR "$AUTHOR")

          # Add PR field if found
          if [ "$PR_FOUND" == "true" ]; then
            FIELDS=$(echo "$FIELDS" | jq -c '. += [{
              "name": "Pull Request",
              "value": ("[#" + $NUMBER + " " + $TITLE + "](" + $URL + ")"),
              "inline": false
            }]' --arg NUMBER "$PR_NUMBER" --arg TITLE "$PR_TITLE" --arg URL "$PR_URL")
          fi

          # Add commit field
          FIELDS=$(echo "$FIELDS" | jq -c '. += [{
            "name": "Commit",
            "value": ("[`" + $SHA + "`](" + $URL + ")"),
            "inline": false
          }]' --arg SHA "$COMMIT_SHA" --arg URL "$COMMIT_URL")

          # Build final payload
          PAYLOAD=$(jq -n -c '{
            "embeds": [{
              "title": "Swarm API Deployment",
              "description": $STATUS,
              "color": ($COLOR | tonumber),
              "fields": ($FIELDS | fromjson),
              "timestamp": $TIMESTAMP,
              "footer": {
                "text": "GitHub Actions"
              }
            }]
          }' --arg STATUS "$STATUS" --arg COLOR "$COLOR" --arg TIMESTAMP "$TIMESTAMP" --argjson FIELDS "$FIELDS")

          curl -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"